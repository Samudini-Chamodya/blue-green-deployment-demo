pipeline {
    agent any
    
    parameters {
        choice(name: 'TARGET_ENVIRONMENT', choices: ['GREEN', 'BLUE'], description: 'Environment to deploy to')
        string(name: 'VERSION', defaultValue: '2.0.0', description: 'Version to deploy')
        booleanParam(name: 'AUTO_SWITCH_TRAFFIC', defaultValue: false, description: 'Automatically switch traffic after successful deployment')
    }
    
    environment {
        BLUE_PORT = '5000'
        GREEN_PORT = '5001'
        CONTROLLER_URL = 'http://localhost:8000'
        GITHUB_URL = 'https://github.com/Samudini-Chamodya/blue-green-deployment-demo.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git url: env.GITHUB_URL, branch: 'main'
                echo "‚úÖ Checked out code from ${env.GITHUB_URL}"
            }
        }
        
        stage('Preparation') {
            steps {
                echo "üöÄ Starting Blue-Green Deployment Pipeline"
                echo "Target Environment: ${params.TARGET_ENVIRONMENT}"
                echo "Version: ${params.VERSION}"
                
                script {
                    env.TARGET_PORT = params.TARGET_ENVIRONMENT == 'GREEN' ? env.GREEN_PORT : env.BLUE_PORT
                    env.INACTIVE_ENV = params.TARGET_ENVIRONMENT == 'GREEN' ? 'BLUE' : 'GREEN'
                    env.INACTIVE_PORT = params.TARGET_ENVIRONMENT == 'GREEN' ? env.BLUE_PORT : env.GREEN_PORT
                }
                
                echo "Target Port: ${env.TARGET_PORT}"
                echo "Inactive Environment: ${env.INACTIVE_ENV}"
                
                // Get current active environment before deployment
                script {
                    try {
                        def statusResponse = bat(script: "curl -s ${env.CONTROLLER_URL}/status", returnStdout: true).trim()
                        def statusJson = readJSON text: statusResponse
                        env.PREVIOUS_ENV = statusJson.active_environment
                        echo "Previous active environment: ${env.PREVIOUS_ENV}"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Could not determine previous environment: ${e.getMessage()}"
                        env.PREVIOUS_ENV = 'UNKNOWN'
                    }
                }
            }
        }
        
        stage('Deploy to Target Environment') {
            steps {
                echo "üì¶ Deploying to ${params.TARGET_ENVIRONMENT} environment..."
                
                script {
                    try {
                        // Run deployment script
                        bat """
                            python scripts\\deploy.py ${params.TARGET_ENVIRONMENT} ${params.VERSION} ${env.TARGET_PORT}
                        """
                        
                        echo "‚úÖ Deployment to ${params.TARGET_ENVIRONMENT} completed"
                    } catch (Exception e) {
                        echo "‚ùå Deployment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Deployment failed")
                    }
                }
            }
        }
        
        stage('Start Application') {
            steps {
                echo "‚ñ∂Ô∏è Starting application in ${params.TARGET_ENVIRONMENT} environment..."
                
                script {
                    try {
                        // Start the application in background
                        bat """
                            cd ${params.TARGET_ENVIRONMENT.toLowerCase()}_environment
                            start /B python start.py > app.log 2>&1
                        """
                        
                        // Wait for the application to start
                        sleep(time: 10, unit: 'SECONDS')
                        
                        echo "‚úÖ Application started in ${params.TARGET_ENVIRONMENT} environment"
                    } catch (Exception e) {
                        echo "‚ùå Failed to start application: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Application start failed")
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo "ü©∫ Performing health check on ${params.TARGET_ENVIRONMENT} environment..."
                
                script {
                    try {
                        def healthCheckResult = bat(
                            script: "python scripts\\health_check.py http://localhost:${env.TARGET_PORT}",
                            returnStatus: true
                        )
                        
                        if (healthCheckResult == 0) {
                            echo "‚úÖ Health check passed for ${params.TARGET_ENVIRONMENT} environment"
                        } else {
                            echo "‚ùå Health check failed for ${params.TARGET_ENVIRONMENT} environment"
                            currentBuild.result = 'FAILURE'
                            error("Health check failed")
                        }
                    } catch (Exception e) {
                        echo "‚ùå Health check error: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Health check failed")
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo "üß™ Running integration tests on ${params.TARGET_ENVIRONMENT} environment..."
                
                script {
                    try {
                        // Simulate integration tests
                        bat """
                            echo "Running API tests..."
                            curl -f http://localhost:${env.TARGET_PORT}/health
                            curl -f http://localhost:${env.TARGET_PORT}/api/version
                            echo "All tests passed!"
                        """
                        
                        echo "‚úÖ Integration tests passed"
                    } catch (Exception e) {
                        echo "‚ùå Integration tests failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Integration tests failed")
                    }
                }
            }
        }
        
        stage('Traffic Switch Decision') {
            when {
                expression { params.AUTO_SWITCH_TRAFFIC == true }
            }
            steps {
                echo "üîÑ Auto-switching traffic to ${params.TARGET_ENVIRONMENT} environment..."
                
                script {
                    try {
                        def switchResult = bat(
                            script: "python scripts\\switch_traffic.py ${env.CONTROLLER_URL} ${params.TARGET_ENVIRONMENT}",
                            returnStatus: true
                        )
                        
                        if (switchResult == 0) {
                            echo "‚úÖ Traffic successfully switched to ${params.TARGET_ENVIRONMENT}"
                            env.TRAFFIC_SWITCHED = 'true'
                        } else {
                            echo "‚ùå Failed to switch traffic"
                            currentBuild.result = 'FAILURE'
                            error("Traffic switch failed")
                        }
                    } catch (Exception e) {
                        echo "‚ùå Traffic switch error: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error("Traffic switch failed")
                    }
                }
            }
        }
        
        stage('Manual Traffic Switch Approval') {
            when {
                expression { params.AUTO_SWITCH_TRAFFIC == false }
            }
            steps {
                script {
                    echo "‚è∏Ô∏è Deployment completed successfully!"
                    echo "üåê New version is running on: http://localhost:${env.TARGET_PORT}"
                    echo "üéØ Ready for manual traffic switch to ${params.TARGET_ENVIRONMENT}"
                    
                    def userInput = input(
                        id: 'SwitchTraffic',
                        message: "Switch traffic to ${params.TARGET_ENVIRONMENT} environment?",
                        parameters: [
                            choice(name: 'ACTION', choices: ['SWITCH', 'SKIP'], description: 'Choose action')
                        ]
                    )
                    
                    if (userInput == 'SWITCH') {
                        echo "üîÑ Switching traffic to ${params.TARGET_ENVIRONMENT}..."
                        def switchResult = bat(
                            script: "python scripts\\switch_traffic.py ${env.CONTROLLER_URL} ${params.TARGET_ENVIRONMENT}",
                            returnStatus: true
                        )
                        
                        if (switchResult == 0) {
                            echo "‚úÖ Traffic successfully switched to ${params.TARGET_ENVIRONMENT}"
                            env.TRAFFIC_SWITCHED = 'true'
                        } else {
                            echo "‚ùå Failed to switch traffic"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } else {
                        echo "‚è≠Ô∏è Traffic switch skipped by user"
                        env.TRAFFIC_SWITCHED = 'false'
                    }
                }
            }
        }
        
        stage('Post-Switch Verification') {
            when {
                expression { env.TRAFFIC_SWITCHED == 'true' }
            }
            steps {
                echo "üîç Verifying traffic switch..."
                
                script {
                    try {
                        // Wait for traffic to stabilize
                        sleep(time: 5, unit: 'SECONDS')
                        
                        // Verify traffic controller status
                        bat """
                            curl -f ${env.CONTROLLER_URL}/status
                            echo "Traffic switch verification completed"
                        """
                        
                        // Display traffic flag content
                        echo "üìÑ Content of traffic_flag.txt:"
                        bat "type traffic_controller\\traffic_flag.txt"
                        
                        echo "‚úÖ Post-switch verification passed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Post-switch verification failed: ${e.getMessage()}"
                        echo "Consider manual rollback if issues persist"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ Pipeline execution completed"
            
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Final Status: ${status}"
                
                if (env.TRAFFIC_SWITCHED == 'true') {
                    echo "üåê Live Traffic: ${env.CONTROLLER_URL}"
                    echo "üîµ Blue Environment: http://localhost:${env.BLUE_PORT}"
                    echo "üü¢ Green Environment: http://localhost:${env.GREEN_PORT}"
                }
                
                // Always show traffic flag content
                echo "üìÑ Current traffic_flag.txt content:"
                bat "type traffic_controller\\traffic_flag.txt"
            }
        }
        
        success {
            echo "üéâ Blue-Green Deployment Pipeline completed successfully!"
            
            script {
                if (env.TRAFFIC_SWITCHED == 'true') {
                    echo "‚úÖ New version ${params.VERSION} is now live on ${params.TARGET_ENVIRONMENT}"
                } else {
                    echo "‚úÖ New version ${params.VERSION} is ready on ${params.TARGET_ENVIRONMENT}"
                    echo "üí° Manual traffic switch available at: ${env.CONTROLLER_URL}/admin"
                }
            }
        }
        
        failure {
            echo "‚ùå Blue-Green Deployment Pipeline failed!"
            echo "üîß Attempting rollback to previous environment..."
            
            script {
                // Attempt rollback if we know the previous environment
                if (env.PREVIOUS_ENV != 'UNKNOWN' && env.PREVIOUS_ENV != params.TARGET_ENVIRONMENT) {
                    try {
                        echo "üîÑ Rolling back to ${env.PREVIOUS_ENV} environment..."
                        def rollbackResult = bat(
                            script: "python scripts\\switch_traffic.py ${env.CONTROLLER_URL} ${env.PREVIOUS_ENV}",
                            returnStatus: true
                        )
                        
                        if (rollbackResult == 0) {
                            echo "‚úÖ Rollback to ${env.PREVIOUS_ENV} completed successfully"
                        } else {
                            echo "‚ùå Rollback failed"
                        }
                    } catch (Exception e) {
                        echo "‚ùå Rollback error: ${e.getMessage()}"
                    }
                } else {
                    echo "‚ö†Ô∏è Cannot perform automatic rollback - previous environment unknown"
                }
                
                // Attempt cleanup of failed deployment
                try {
                    bat """
                        if exist ${params.TARGET_ENVIRONMENT.toLowerCase()}_environment\\app.pid (
                            for /f %%i in (${params.TARGET_ENVIRONMENT.toLowerCase()}_environment\\app.pid) do taskkill /F /PID %%i
                            del ${params.TARGET_ENVIRONMENT.toLowerCase()}_environment\\app.pid
                        )
                    """
                    echo "üßπ Cleanup completed"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Cleanup failed: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Blue-Green Deployment completed with warnings"
            echo "üîç Review the logs and consider manual intervention"
            
            script {
                // Offer manual rollback option
                if (env.TRAFFIC_SWITCHED == 'true') {
                    try {
                        def userInput = input(
                            id: 'ManualRollback',
                            message: "Deployment completed with warnings. Rollback to ${env.PREVIOUS_ENV}?",
                            parameters: [
                                choice(name: 'ROLLBACK_ACTION', choices: ['ROLLBACK', 'KEEP'], description: 'Choose action')
                            ]
                        )
                        
                        if (userInput == 'ROLLBACK') {
                            echo "üîÑ Performing manual rollback to ${env.PREVIOUS_ENV}..."
                            def rollbackResult = bat(
                                script: "python scripts\\switch_traffic.py ${env.CONTROLLER_URL} ${env.PREVIOUS_ENV}",
                                returnStatus: true
                            )
                            
                            if (rollbackResult == 0) {
                                echo "‚úÖ Manual rollback to ${env.PREVIOUS_ENV} completed"
                            } else {
                                echo "‚ùå Manual rollback failed"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Manual rollback input error: ${e.getMessage()}"
                    }
                }
            }
        }
    }
}
